{
  "Comment": "A description of my state machine",
  "StartAt": "List copy-job executions",
  "States": {
    "List copy-job executions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:sfn:listExecutions",
      "Next": "Has next token",
      "Output": {
        "nextToken": "{% $states.result.NextToken ? $states.result.NextToken : false %}"
      },
      "Assign": {
        "allExecutions": "{% $append(\n  ($allExecutions ? $allExecutions : []),\n  [$states.result.Executions.(ExecutionArn)]\n) %}"
      },
      "Arguments": "{% {\n  \"StateMachineArn\": \"${__handle_copy_jobs_state_machine_arn__}\",\n  \"StatusFilter\": \"RUNNING\",\n  \"NextToken\": $states.input.nextToken ? $states.input.nextToken : null\n} ~>\n$sift(function($v, $k){$v != null}) %}"
    },
    "Has next token": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "List copy-job executions",
          "Condition": "{% $states.input.nextToken ? true : false %}",
          "Comment": "Get all executions on next page"
        }
      ],
      "Default": "Any handle copy jobs running?"
    },
    "Any handle copy jobs running?": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Disable send external heartbeat rule",
          "Condition": "{% $count($allExecutions) = 0 %}",
          "Comment": "No current handle copy jobs running"
        }
      ],
      "Default": "For each handle-copy-job execution (batched)"
    },
    "Disable send external heartbeat rule": {
      "Type": "Task",
      "Arguments": {
        "Name": "${__external_heartbeat_event_bridge_rule_name__}"
      },
      "Resource": "arn:aws:states:::aws-sdk:eventbridge:disableRule",
      "Retry": [
        {
          "ErrorEquals": ["EventBridge.InternalException"],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "Comment": "Handle internal event bridge exception"
        }
      ],
      "End": true
    },
    "For each handle-copy-job execution (batched)": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "For each handle-copy-job execution",
        "States": {
          "For each handle-copy-job execution": {
            "Type": "Map",
            "ItemProcessor": {
              "ProcessorConfig": {
                "Mode": "INLINE"
              },
              "StartAt": "Get task token input",
              "States": {
                "Get task token input": {
                  "Type": "Task",
                  "Arguments": {
                    "ExecutionArn": "{% $states.input.executionArn %}"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution",
                  "Output": {
                    "taskToken": "{% $parse($states.result.Input) ~> $lookup('taskToken') %}"
                  },
                  "Next": "Send task heartbeat of running copy job"
                },
                "Send task heartbeat of running copy job": {
                  "Type": "Task",
                  "Arguments": {
                    "TaskToken": "{% $states.input.taskToken %}"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:sfn:sendTaskHeartbeat",
                  "Catch": [
                    {
                      "ErrorEquals": ["Sfn.TaskTimedOutException"],
                      "Next": "Pass"
                    }
                  ],
                  "End": true
                },
                "Pass": {
                  "Type": "Pass",
                  "End": true
                }
              }
            },
            "End": true,
            "Items": "{% $states.input.Items %}",
            "ItemSelector": {
              "executionArn": "{% $states.context.Map.Item.Value %}"
            }
          }
        }
      },
      "End": true,
      "Items": "{% $allExecutions %}",
      "Label": "Foreachhandle-copy-jobexecutionbatched",
      "MaxConcurrency": 1000,
      "ItemBatcher": {
        "MaxItemsPerBatch": 50
      }
    }
  },
  "QueryLanguage": "JSONata"
}
